services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lusilearn-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lusilearn-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for content search
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: lusilearn-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${ELASTICSEARCH_URL}/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: lusilearn-web
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - api
    command: npm run dev --workspace=apps/web

  # API Service (Node.js/Express)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: lusilearn-api
    ports:
      - "${PORT}:4000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        npm install &&
        npm run build --workspace=@lusilearn/config &&
        npm run build --workspace=@lusilearn/shared-types &&
        npm run build --workspace=@lusilearn/api &&
        node apps/api/dist/apps/api/src/index.js
      "

  # AI Service (Python/FastAPI)
  ai-service:
    build:
      context: .
      dockerfile: apps/ai-service/Dockerfile
      target: development
    container_name: lusilearn-ai-service
    ports:
      - "8000:8000"
    volumes:
      - ./apps/ai-service:/app
    environment:
      - ENVIRONMENT=${NODE_ENV}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_DB_API_KEY=${VECTOR_DB_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  default:
    name: lusilearn-network
